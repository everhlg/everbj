<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:cache="http://www.springframework.org/schema/cache" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"	
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"  
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
	http://www.springframework.org/schema/context  
	http://www.springframework.org/schema/context/spring-context-4.1.xsd  
	http://www.springframework.org/schema/mvc  
	http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd    
	http://www.springframework.org/schema/tx     
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
 	http://www.springframework.org/schema/aop     
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/data/mongo  
    http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd 
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.1.xsd	        
	http://www.springframework.org/schema/cache 
	http://www.springframework.org/schema/cache/spring-cache.xsd"> 

	<context:component-scan base-package="">  
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
    </context:component-scan> 

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	    	<list>
	    		<value>classpath:mysql.properties</value>
	    		<value>classpath:mongodb.properties</value>
	    	</list>
	    </property>		
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" 
		  init-method="init" destroy-method="close"> 
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		
		  <!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" /> 
		<property name="maxActive" value="${maxActive}" />
		
		  <!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		
		  <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		  <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		  <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		  <!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" /> 	    
	</bean>	

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations"
			value="classpath:com/sanmi/app/dao/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sanmi.app.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置事务属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="confirm*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="regist*" propagation="REQUIRED"/>
            <tx:method name="use*" propagation="REQUIRED"/>
            <tx:method name="get*" read-only="true"/>      
            <tx:method name="list*" read-only="true"/>            
            <tx:method name="find*" read-only="true"/>  
            <tx:method name="select*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <tx:method name="check*" read-only="true"/>  
        </tx:attributes>
    </tx:advice>	
	<!-- 配置事务的切点,并把事务切点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.sanmi.app.service.*.*(..))" id="txPointCut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>    

	<!-- 字符过滤 -->
<!-- 	<bean id="filterChar" class="com.sanmi.utils.FilterChar"> -->
<!-- 	    <property name="list"> -->
<!-- 	            <list> -->
<!-- 	                <value>login.jsp</value> -->
<!-- 	                <value>/ZHCS/user/login.do</value>	              -->
<!-- 	            </list> -->
<!-- 	        </property> -->
<!-- 	</bean> -->
<!--    <bean id="readSetting" class="com.sanmi.utils.ReadSetting"> -->
<!--        <property name="setting"> -->
<!--            <map> -->
<!--               <entry key="test" value="test"/> -->
<!--            </map> -->
<!--        </property> -->
<!--    </bean> -->

	<!-- 启用 ehcache -->
	<!--  缓存  属性-->
	<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
		<property name="configLocation"  value="classpath:ehcache.xml"/> 
	</bean> 
	<!-- 默认是cacheManager -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">  
		<property name="cacheManager"  ref="cacheManagerFactory"/>  
	</bean>  	
	<!-- 支持缓存注解 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	
	<!-- MongoDB GridFS Template -->
	<mongo:db-factory host="${mongoIp}" port="${mongoPort}" dbname="${mongoDbname}" />
	<mongo:mapping-converter id="converter" db-factory-ref="mongoDbFactory"/>
	 
	<bean id="gridfsTemplate" class="org.springframework.data.mongodb.gridfs.GridFsTemplate">
	  <constructor-arg ref="mongoDbFactory"/>
	  <constructor-arg ref="converter"/>
	</bean>		
	
	<!-- 定时任务 ：优惠券、团购、促销、预约数据扫描，自动根据日期更新有效状态-->
	<task:scheduled-tasks>   
		<!--cron格式：秒 ,分 ,小时 ,日期 ,月份 , 星期 -->
        <task:scheduled ref="taskService" method="updateOrderStatus" cron="0 34 18 ? * *"/>   
	</task:scheduled-tasks>
</beans>